/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh",
  "javax/jms.bsh",
  "spring.bsh",
  "apache/cxf.bsh",
  "apache/camel.bsh",
  "lang/groovy.bsh",
  "libs/quartz.bsh",
  "apache/httpclient.bsh"
);


__alfresco() {

    // Default values for ALFRESCO tracer options
    zorka.defCfg("alfresco.batch.trace", zorka.stringCfg("tracer", "no"));
    zorka.defCfg("alfresco.batch.trace.time", zorka.longCfg("tracer.min.trace.time"));
    zorka.defCfg("alfresco.batch.import.time", zorka.longCfg("tracer.min.trace.time"));

    _mbean = "zorka:type=ZorkaStats,name=Alfresco";
    _trace = zorka.boolCfg("alfresco.batch.trace");
    _traceTime = zorka.longCfg("alfresco.batch.trace.time");
    _importTime = zorka.longCfg("alfresco.batch.import.time");


    if (zorka.boolCfg("alfresco.trace.batches", true)) {
      spy.add(spy.instrument("ALFRESCO_BATCH")
         .onEnter(spy.fetchArg("THIS", 0),
             _trace ? spy.subchain(
                 tracer.begin("AF_BATCH", _traceTime),
                 tracer.formatAttr("WORKER", "${THIS}")
             ) : null)
         .onError(_trace ? tracer.flags(tracer.SUBMIT_TRACE) : null)
         .onSubmit(spy.zorkaStats("java", _mbean, "stats", "AF_BATCH"))
         .include(spy.byInterfaceAndMethod("org.alfresco.repo.batch.Batch**", "process")));
    }

    if (zorka.boolCfg("alfresco.trace.imports", true)) {
      spy.add(spy.instrument("ALFRESCO_IMPORT_FILE")
         .onEnter(spy.fetchArg("NODE_REF", 1),
             _trace ? spy.subchain(
                 tracer.begin("AF_IMPORT", _importTime),
                 tracer.formatAttr("NODE", "${NODE_REF}")
             ) : null)
         .onError(_trace ? tracer.flags(tracer.SUBMIT_TRACE) : null)
         .onSubmit(spy.zorkaStats("java", _mbean, "stats", "AF_IMPORT"))
         .include(spy.byMethod(0, "org.alfresco.repo.bulkimport.impl.AbstractNodeImporter", "importImportableItemFile", null)));
    }

    if (_trace_enabled) {
      spy.add(spy.instrument("ALFRESCO_WEBSURF_CALL")
        .onEnter(spy.fetchArg("URI", 1))
        .onReturn(spy.fetchRetVal("RSLT"))
        .onSubmit(
          tracer.formatAttr("URI", "${URI}"),
          tracer.formatAttr("STATUS", "${RSLT.status.code}"))
        .include(
          spy.byMethod(0, "org.springframework.extensions.webscripts.connector.HttpConnector", "call",
            "org.springframework.extensions.webscripts.connector.Response", "String")));
    }

    return this;
}

alfresco = __alfresco();

