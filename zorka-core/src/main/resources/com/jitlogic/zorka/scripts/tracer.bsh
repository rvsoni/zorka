/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// Set defaults
zorka.defCfg("tracer", "no");
zorka.defCfg("tracer.exclude.compat", zorka.stringCfg("tracer", "no"));
zorka.defCfg("tracer.min.trace.time", 1000);
zorka.defCfg("tracer.min.method.time", 250000);
zorka.defCfg("tracer.max.trace.records", 4096);
zorka.defCfg("tracer.min.trace.calls", 262144);

zorka.defCfg("tracer.distributed", "no");

zorka.defCfg("tracer.file", "no");
zorka.defCfg("tracer.net", "yes");
zorka.defCfg("tracer.net.protocol", "zico");
zorka.defCfg("tracer.zabbix", "no");

if (zorka.boolCfg("tracer")) {

  zorka.logInfo("Enabling and configuring Zorka tracer ...");

  // Process high priority tracer includes ...
  for (pkg : zorka.listCfg("tracer.include")) {
    tracer.include(pkg);
  }

  // Process high priority tracer excludes ...
  for (pkg : zorka.listCfg("tracer.exclude")) {
    tracer.exclude(pkg);
  }


  tracer.exclude("100:com.jitlogic.zorka.**");
  tracer.exclude("java.**", "sun.reflect.**", "sun.awt.**", "com.sun.beans.**", "$Proxy*", "**$$Lambda$**");
  tracer.exclude("com.sun.proxy.$Proxy*");
  tracer.include(spy.byClass("**").forTrace().priority(1000));


  if (zorka.boolCfg("tracer.file")) {
    tracer.output(tracer.toFile(
      zorka.stringCfg("tracer.file.path", "${zorka.log.dir}/trace.ztr"),
      zorka.intCfg("tracer.file.fnum", 16),
      zorka.kiloCfg("tracer.file.size", 32*1024*1024),
      zorka.boolCfg("tracer.file.compress", true)));
  }

  if (zorka.boolCfg("tracer.net") && "zico".equalsIgnoreCase(zorka.stringCfg("tracer.net.protocol").trim())) {
    zorka.logInfo("Configuring ZICO output for tracer ...");
    tracer.output(tracer.toZico(
      zorka.stringCfg("tracer.net.addr", "127.0.0.1"),
      zorka.intCfg("tracer.net.port", 8640),
      zorka.stringCfg("tracer.net.host", zorka.getHostname()),
      zorka.stringCfg("tracer.net.pass", "changeme"),
      zorka.intCfg("tracer.net.qlen", 64),
      zorka.kiloCfg("tracer.net.packet", 8*1024*1024),
      zorka.intCfg("tracer.net.retries", 10),
      zorka.intCfg("tracer.net.retry.time", 125L),
      zorka.intCfg("tracer.net.retry.exp", 2L),
      zorka.intCfg("tracer.net.timeout", 60000)));
  }

  if (zorka.boolCfg("tracer.net") && "cbor".equalsIgnoreCase(zorka.stringCfg("tracer.net.protocol").trim())) {
    zorka.logInfo("Configuring CBOR output for tracer ...");
    cfg = zorka.mapCfg("tracer.net",
            util.map(
              "hostname", zorka.stringCfg("zorka.hostname", zorka.getHostname()),
              "app.name", "DSC",
              "env.name", "TST",
              "auth.key", "zorka",
              "http.url", "http://127.0.0.1:8640",
              "http.retries", "10",
              "http.retry.time", "125",
              "http.retry.exp", "2",
              "http.timeout", "60000",
              "qlen", 64));
    output = tracer.toCbor(cfg);
    output.start();
    tracer.output(output);
  }

  if (zorka.boolCfg("tracer.zabbix")) {
    tracer.output(tracer.toZabbix(
      zorka.stringCfg("tracer.zabbix.addr", "127.0.0.1"),
      zorka.intCfg("tracer.zabbix.port", 10050),
      zorka.stringCfg("tracer.net.host", zorka.getHostname()),
      zorka.intCfg("tracer.net.qlen", 64),
      zorka.intCfg("tracer.zabbix.batch.size", 100),
      zorka.intCfg("tracer.net.retries", 10),
      zorka.intCfg("tracer.net.retry.time", 125L),
      zorka.intCfg("tracer.net.retry.exp", 2L),
      zorka.intCfg("tracer.net.timeout", 60000),      
      zorka.intCfg("tracer.zabbix.send.interval", 15)
    ));

    zorka.logDebug("Setting tracer.zabbix.send.interval to " + zorka.intCfg("tracer.zabbix.send.interval", 15) );
  }


  if (zorka.hasCfg("tracer.min.method.time")) {
    mmt = zorka.longCfg("tracer.min.method.time");
    zorka.logInfo("Setting tracer minimum method time to " + mmt + " ns");
    tracer.setTracerMinMethodTime(mmt);
  }


  if (zorka.hasCfg("tracer.min.trace.time")) {
    mtt = zorka.longCfg("tracer.min.trace.time");
    zorka.logInfo("Settting tracer minimum trace time to " + mtt + " ms");
    tracer.setTracerMinTraceTime(mtt);
  }


  if (zorka.hasCfg("tracer.max.trace.records")) {
    mtr = zorka.intCfg("tracer.max.trace.records");
    zorka.logInfo("Setting maximum records per trace to " + mtr + ".");
    tracer.setTracerMaxTraceRecords(mtr);
  }

  if (zorka.hasCfg("tracer.min.trace.calls")) {
    mtc = zorka.intCfg("tracer.min.trace.calls");
    zorka.logInfo("Setting minimum calls to force trace submission to " + mtc + ".");
    tracer.setTracerMinTraceCalls(mtc);
  }

  if (zorka.hasCfg("tracer.flags")) {
    zfl = zorka.intCfg("tracer.flags");
    zorka.logInfo("Setting tracer flags: " + zfl);
    tracer.setDefaultTraceFlags(zfl);
  }

  if (zorka.boolCfg("tracer.tuner", true)) {
    zorka.logInfo("Enabling tracer tuner ...");
    tracer.setTuningEnabled(true);
  }

  tracer.setTraceSpyMethods(true);
} else {
  tracer.setTraceSpyMethods(false);
}

_trace_enabled = zorka.boolCfg("tracer");
_dtrace_enabled = _trace_enabled && zorka.boolCfg("tracer.distributed");

