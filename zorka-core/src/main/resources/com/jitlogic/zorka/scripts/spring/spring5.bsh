/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh",
  "audit.bsh"
);

__spring() {

  zorka.defCfg("spring.trace", zorka.boolCfg("tracer"));
  zorka.defCfg("spring.trace.time", zorka.longCfg("tracer.min.trace.time"));

  zorka.defCfg("spring.stats", "yes");
  zorka.defCfg("spring.stats.mbean", "zorka:type=ZorkaStats,name=Spring");

  zorka.defCfg("spring.instrument.all", "yes");

  _instrumentAll = zorka.boolCfg("spring.instrument.all");

  zorka.defCfg("spring.instrument.invocable.handler", _instrumentAll);

  _trace = zorka.boolCfg("spring.trace");
  _traceTime = zorka.longCfg("spring.trace.time");
  _stats = zorka.boolCfg("spring.stats");
  _mbean = zorka.stringCfg("spring.stats.mbean");

  __invokeArgsProcessor() {
    process(rec) {
      args = rec.get("ARGS");
      if (args != null) {
        for (i = 0; i < args.length; i++) {
          tracer.newAttr("ARG["+i+"]", ""+args[i]);
        }
      }
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  if (zorka.boolCfg("spring.instrument.invocable.handler", false)) {
    spy.add(
      spy.instrument("SPRING_WEB_INVOCABLE_HANDLER")
        .onEnter(spy.fetchArg("THIS", 0), spy.fetchArg("ARGS", 1),
          spy.get("BT", "THIS", "beanType"),
          _trace ? spy.subchain(
            tracer.begin("SPRING", _traceTime),
            tracer.formatAttr("CLASS", "${BT.name}"),
            tracer.formatAttr("METHOD", "${THIS.method.name}"),
            __invokeArgsProcessor()
          ) : null)
        .onReturn(
          spy.fetchRetVal("RSLT"),
          _trace ? spy.subchain(
            tracer.formatAttr("RSLT", "${RSLT}")
          ) : null)
        .onSubmit(
          _stats ? spy.zorkaStats("java", _mbean, "mvcRenders", "ALL") : null,
          _stats ? spy.zorkaStats("java", _mbean, "mvcRenders", "${BEAN}") : null
        )
        .include(spy.byMethod(0, "org.springframework.web.method.support.InvocableHandlerMethod", "doInvoke", null))
    );
  }

  __http_client() {

    zorka.defCfg("spring.http.client.trace", zorka.stringCfg("tracer", "no"));
    zorka.defCfg("spring.http.client.trace.time", zorka.longCfg("tracer.min.trace.time"));

    _trace = zorka.boolCfg("spring.http.client.trace");
    _traceTime = zorka.longCfg("spring.http.client.trace.time");

    dtrace_req() {
      process(rec) {
        ds = rec.get("DTRACE");
        hdrs = rec.get("HDR_OUT");
        if (ds != null && hdrs != null) {
          hdrs.add(tracer.DTRACE_UUID_HDR, ds.getUuid());
          hdrs.add(tracer.DTRACE_TID_HDR, rec.get("DTRACE_OUT"));
          xtt = rec.get(tracer.DTRACE_XTT);
          if (xtt != null) {
              hdrs.add(tracer.DTRACE_XTT, xtt.toString());
          }
        }

        return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    proc_headers(hattr, prefix) {
      process(rec) {
        hdrs = rec.get(hattr);
        if (hdrs != null) {
          for (e : hdrs.entrySet()) {
            k = e.getKey();
            v = e.getValue();
            if (v != null) {
              tracer.newAttr(prefix+k, v.size() == 1 ? v.get(0) : ""+v);
            }
          }
        }
        return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    if (zorka.boolCfg("spring.http.client", true)) {
      spy.add(
        spy.instrument("SPRING_WEB_HTTP_CLIENT")
          .onEnter(spy.fetchArg("REQ", 0),
            spy.get("CONN", "REQ", "connection"),
            spy.get("HDR_OUT", "REQ", "headers"),
            _trace ? spy.subchain(
              proc_headers("HDR_OUT", "HdrOut__"),
              tracer.begin("HTTP_CLI", _traceTime),
              tracer.formatAttr("URI", "${CONN.requestUri}"),
              _dtrace_enabled ? tracer.dtraceOutput() : null,
              _dtrace_enabled ? dtrace_req() : null)
            : null)
          .onReturn(spy.fetchRetVal("RESP"),
            spy.get("HDR_IN", "RESP", "headers"),
            _trace ? spy.subchain(
              tracer.formatAttr("METHOD", "${REQ.method}"),
              tracer.formatAttr("STATUS", "${CONN.status}"),
              proc_headers("HDR_IN", "HdrIn__"))
            : null)
          .onError(tracer.flags(tracer.SUBMIT_TRACE))
          .onSubmit(_stats ? spy.zorkaStats("java", _mbean, "webClient", "ALL") : null)
          .include(spy.byMethod("org.springframework.http.client.AbstractClientHttpRequest","execute")));
    }

    return this;
  }

  http_client = __http_client();

  __amqp() {

    __rabbit() {

      if (zorka.boolCfg("spring.amqp.rabbit", true)) {

        dtrace_send() {
          process(rec) {
            ds = rec.get("DTRACE");
            hdrs = rec.get("HEADERS");
            if (ds != null && hdrs != null) {
              hdrs.put(tracer.DTRACE_UUID_HDR, ds.getUuid());
              hdrs.put(tracer.DTRACE_TID_HDR, rec.get(tracer.DTRACE_OUT));
              xtt = rec.get(tracer.DTRACE_XTT);
              if (xtt != null) {
                  hdrs.put(tracer.DTRACE_XTT_HDR, xtt.toString());
              }
            }
            return rec;
          }
          return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
        }

        spy.add(
          spy.instrument("SPRING_AMQP_RABBIT_SEND")
            .onEnter(spy.fetchArg("CHANNEL",1),
              spy.fetchArg("EXCH",2), spy.fetchArg("RKEY",3), spy.fetchArg("MSG",5),
              spy.get("CONN", "CHANNEL", "connection"),
              spy.get("PROPS", "MSG", "messageProperties"),
              spy.get("HEADERS", "PROPS", "headers"),
              _trace ? spy.subchain(
                tracer.begin("AMQP_SEND"),
                tracer.formatAttr("EXCHANGE", "${EXCH}"),
                tracer.formatAttr("ROUTING_KEY", "${RKEY}"),
                tracer.formatAttr("DELIVERY", "${PROPS.deliveryMode}"),
                tracer.formatAttr("CONTENT_TYPE", "${PROPS.contentType}"),
                tracer.formatAttr("PRIORITY", "${PROPS.priority}"),
                tracer.formatAttr("CONN", "${CONN.address}:${CONN.port}/${CONN.id}"),
                _dtrace_enabled ? tracer.dtraceOutput() : null,
                tracer.procAttr(tracer.PA_MAP_OF_ANY, "HdrOut__", "HEADERS"),
                _dtrace_enabled ? dtrace_send() : null)
              : null)
            .onError(tracer.flags(tracer.SUBMIT_TRACE))
            .onSubmit(_stats ? spy.zorkaStats("java", _mbean, "rabbit", "SEND") : null)
            .include(spy.byMethod(spy.AC_PROTECTED,
              "org.springframework.amqp.rabbit.core.RabbitTemplate", "sendToRabbit",
              "void", "com.rabbitmq.client.Channel", "String", "String", "boolean",
              "org.springframework.amqp.core.Message")));

        dtrace_recv() {
          process(rec) {
            hdrs = rec.get("HEADERS");
            if (hdrs != null) {
              uuid = hdrs.get(tracer.DTRACE_UUID_HDR);
              if (uuid != null) rec.put(tracer.DTRACE_UUID, uuid);
              tid = hdrs.get(tracer.DTRACE_TID_HDR);
              if (tid != null) rec.put(tracer.DTRACE_IN, tid);
              xtt = hdrs.get(tracer.DTRACE_XTT_HDR);
              if (xtt != null) rec.put(tracer.DTRACE_XTT, xtt);
            }
            return rec;
          }
          return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
        }

        spy.add(
          spy.instrument("SPRING_AMQP_RABBIT_RECV")
            .onEnter(spy.fetchArg("CHANNEL",1),spy.fetchArg("MSG",2),
              spy.get("CONN", "CHANNEL", "connection"),
              spy.get("PROPS", "MSG", "messageProperties"),
              spy.get("HEADERS", "PROPS", "headers"),
              _trace ? spy.subchain(
                tracer.begin("AMQP_RECV"),
                //tracer.formatAttr("DELIVERY", "${PROPS.deliveryMode}"),
                tracer.formatAttr("CONTENT_TYPE", "${PROPS.contentType}"),
                tracer.formatAttr("PRIORITY", "${PROPS.priority}"),
                tracer.formatAttr("EXCHANGE", "${PROPS.receivedExchange}"),
                tracer.formatAttr("ROUTING_KEY", "${PROPS.receivedRoutingKey}"),
                tracer.formatAttr("CONN", "${CONN.address}:${CONN.port}/${CONN.id}"),
                _dtrace_enabled ? dtrace_recv() : null,
                _dtrace_enabled ? tracer.dtraceInput(zorka.longCfg("tracer.min.trace.time")) : null,
                tracer.procAttr(tracer.PA_MAP_OF_ANY, "HdrIn__", "HEADERS"))
              : null)
            .onError(tracer.flags(tracer.SUBMIT_TRACE))
            .onSubmit(_stats ? spy.zorkaStats("java", _mbean, "rabbit", "RECV") : null)
            .include(spy.byMethod(spy.AC_PROTECTED,
              "org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer", "executeListener",
              "void", "com.rabbitmq.client.Channel", "org.springframework.amqp.core.Message")));
      }

      return this;
    }

    rabbit = __rabbit();
    return this;
  }

  amqp = __amqp();
  return this;
}

spring = __spring();
