/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh",
  "traps.bsh"
);

__sql() {

  zorka.defCfg("sql", "yes");

  // Default values for SQL stats
  zorka.defCfg("sql.stats", "yes");
  zorka.defCfg("sql.stats.congestion", "yes");
  zorka.defCfg("sql.stats.mbean", "zorka:type=ZorkaStats,name=SqlStats");

  // Default values for SQL parameter processing
  zorka.defCfg("sql.params", "no");

  // Default values for SQL slow requests log configuration options
  zorka.defCfg("sql.slow", zorka.boolCfg("traps.slow"));
  zorka.defCfg("sql.slow.time", "5000");
  zorka.defCfg("sql.slow.file.path", util.path("${zorka.log.dir}", "sql-slow.log"));
  zorka.defCfg("sql.slow.file.max", "8M");
  zorka.defCfg("sql.slow.file.num", "8");
  zorka.defCfg("sql.slow.format", "[${TIME}] ${DB}: ${SQL}");

  // Default values for SQL error log configuration options
  zorka.defCfg("sql.error", zorka.boolCfg("traps.error"));
  zorka.defCfg("sql.error.file.path", util.path("${zorka.log.dir}", "sql-error.log"));
  zorka.defCfg("sql.error.file.max", "8M");
  zorka.defCfg("sql.error.file.num", "8");
  zorka.defCfg("sql.error.format", "[${TIME}] ${DB}: ${SQL} -> ${ERR}");

  // Default values for SQL tracer options
  zorka.defCfg("sql.trace", zorka.stringCfg("tracer"));
  zorka.defCfg("sql.trace.time", zorka.longCfg("tracer.min.trace.time"));

  _stats = zorka.boolCfg("sql.stats");
  _trace = zorka.boolCfg("sql.trace");
  _congestion = zorka.boolCfg("sql.stats.congestion");
  _mbean = zorka.stringCfg("sql.stats.mbean");
  _action = _congestion ? spy.ACTION_EXIT|spy.ACTION_STATS : spy.ACTION_STATS;
  _params = zorka.boolCfg("sql.params");
  _prefix = zorka.stringCfg("sql.trace.params.prefix");
  _error = zorka.boolCfg("sql.error");
  _excludedParams = zorka.setCfg("sql.params.exclude");

  _errors = zorka.setCfg("sql.error.codes");

  _slow_chain = traps.subchain("sql", "slow");
  _error_chain = traps.subchain("sql", "error");

  _tags_chain = null;

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("SQL");
  }

  if (_stats && zorka.boolCfg("sql.tags", false)) {
      zorka.logInfo("Enabling SQL tagging ...");
      _tags_chain = spy.subchain(spy.put("TAG",
          zorka.stringCfg("sql.tags.0", "OTHER")));
      for (i = 1; ; i++) {
          if (zorka.hasCfg("sql.tags."+i+".sql")) {
              zorka.logInfo("SQL_TAG: " + zorka.stringCfg("sql.tags."+i+".sql")
                  + " -> " + zorka.stringCfg("sql.tags."+i));
              _tags_chain = _tags_chain.with(
                  spy.transform("TAG", "SQL",
                      zorka.stringCfg("sql.tags."+i+".sql"),
                      zorka.stringCfg("sql.tags."+i)));
          } else {
              break;
          }
      }
      _tags_chain = _tags_chain.with(
          spy.zorkaStats("java", _mbean, "byTag", "${TAG}"));
  }


  _stats_chain = null;

  if (_stats) {
    _stats_chain = spy.subchain(
        spy.zorkaStats("java", _mbean, "stats", "ALL"),
        spy.zorkaStats("java", _mbean, "stats", "${DB}"),
        _tags_chain
      );
  }


  // Nagios commands for zorka stats
  if (zorka.boolCfg("nagios", false)) {
    zorka.require("nagios.bsh");
    nagios_util.def_zorka_stat(_mbean, "SQL");
  }

  discovery(attr, tag) {
    return zabbix.discovery(zorka.query("java", _mbean, "name", "type").get(attr).listAs("**", tag));
  }

  calls(attr, tag) {
    calls = zorka.jmx("java", _mbean, attr, tag, "calls");
    return calls != null ? calls : 0;
  }

  errors(attr, tag) {
    errors = zorka.jmx("java", _mbean, attr, tag, "errors");
    return errors != null ? errors : 0;
  }

  peak(attr, tag) {
    peak = zorka.jmx("java",  _mbean, attr, tag, "maxTimeCLR");
    return peak != null ? peak : 0;
  }

  threads(attr, tag) {
    threads = zorka.jmx("java",  _mbean, attr, tag, "maxThreadsCLR");
  }

  avg5(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG5");
  }

  avg15(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG15");
  }


  _instrumentStmt(name, dbform) {
    return spy.instrument(name)
    .onEnter(spy.fetchArg("THIS", 0), spy.fetchArg("SQL", 1),
      spy.format("DB", dbform),
      _trace ? spy.subchain(
        tracer.begin("SQL", zorka.longCfg("sql.trace.time")),
        tracer.attr("SQL", "SQL"),
        tracer.attr("DB", "DB")
      ) : null)
    .onError(spy.fetchError("ERR"), _trace ? tracer.flags(tracer.SUBMIT_TRACE) : null, _error_chain)
    .onSubmit(spy.strTime("TIME"), _slow_chain, _stats_chain);
  }


  _instrumentPStmt(name, dbform, sqlform) {
    return spy.instrument(name)
    .onEnter(spy.fetchArg("THIS", 0),
      spy.format("SQL", sqlform),
      spy.format("DB", dbform),
      _trace ? spy.subchain(
        tracer.begin("SQL", zorka.longCfg("sql.trace.time")),
        tracer.attr("SQL", "SQL"),
        tracer.attr("DB", "DB")
      ) : null)
    .onError(spy.fetchError("ERR"), _trace ? tracer.flags(tracer.SUBMIT_TRACE) : null, _error_chain)
    .onSubmit(spy.strTime("TIME"), _slow_chain, _stats_chain);
  }

  return this;
}

sql = __sql();

