/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh",
  "traps.bsh"
);

__soap() {

  zorka.defCfg("soap.trace", zorka.boolCfg("tracer"));
  zorka.defCfg("soap.trace.time", zorka.longCfg("tracer.min.trace.time"));

  zorka.defCfg("soap.stats", "yes");
  zorka.defCfg("soap.stats.mbean", "zorka:type=ZorkaStats,name=SOAP");

  zorka.defCfg("soap.fetch.xml", "yes");
  zorka.defCfg("soap.fetch.xml.limit", "65536");
  zorka.defCfg("soap.fetch.xml.in", zorka.boolCfg("soap.fetch.xml"));
  zorka.defCfg("soap.fetch.xml.out", zorka.boolCfg("soap.fetch.xml"));


  // Default values for SOAP slow requests log configuration options
  zorka.defCfg("soap.slow", zorka.boolCfg("traps.slow"));
  zorka.defCfg("soap.slow.time", "5000");
  zorka.defCfg("soap.slow.file.path", util.path("${zorka.log.dir}", "soap-slow.log"));
  zorka.defCfg("soap.slow.file.max", "8M");
  zorka.defCfg("soap.slow.file.num", "8");
  zorka.defCfg("soap.slow.format",
    zorka.boolCfg("soap.fetch.xml")
      ? "[${TIME}] ${SERVICE}/${METHOD} -> \n ${XML_IN} \n ${XML_OUT}"
      : "[${TIME}] ${SERVICE}/${METHOD}");


  // Default values for SOAP error log configuration options
  zorka.defCfg("soap.error", zorka.boolCfg("traps.error"));
  zorka.defCfg("soap.error.file.path", util.path("${zorka.log.dir}", "soap-error.log"));
  zorka.defCfg("soap.error.file.max", "8M");
  zorka.defCfg("soap.error.file.num", "8");
  zorka.defCfg("soap.error.format",
    zorka.boolCfg("soap.fetch.xml")
      ? "${SERVICE}${METHOD} -> ${ERROR} \nXML_IN='''${XML_IN}''' \nXML_OUT='''${XML_OUT}'''"
      : "${SERVICE}${METHOD} -> ${ERROR}");


  _trace = zorka.boolCfg("soap.trace");
  _time = zorka.longCfg("soap.trace.time");
  _stats = zorka.boolCfg("soap.stats");

  _fetch_xml       = zorka.boolCfg("soap.fetch.xml");
  _fetch_xml_in    = zorka.boolCfg("soap.fetch.xml.in");
  _fetch_xml_out   = zorka.boolCfg("soap.fetch.xml.out");
  _fetch_xml_limit = zorka.longCfg("soap.fetch.xml.limit");

  _mbean = zorka.stringCfg("soap.stats.mbean");

  _slow_chain = traps.subchain("soap", "slow");
  _error_chain = traps.subchain("soap", "error");

  discovery(type) {
    return zabbix.discovery(zorka.query("java", _mbean, "name", "type").get(type).listAs("**", "OP"));
  }

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("SOAP");
  }

  return this;
}

soap = __soap();
