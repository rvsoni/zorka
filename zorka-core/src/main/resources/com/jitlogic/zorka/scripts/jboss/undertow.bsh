/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "http.bsh"
);

__undertow() {


  param_processor() {

      _pprefix = zorka.stringCfg("http.params.prefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.params.include"), zorka.listCfg("http.params.exclude"));

      process(rec) {
          sb = new StringBuilder();
          pmap = rec.get("EXCH").getQueryParameters();
          if (pmap != null) {
              for (e : pmap.entrySet()) {
                  String k = e.getKey();
                  if (_matcher.matches(k)) {
                      String v = e.getValue().size() > 0 ? e.getValue().peek() : "";
                      if (v == null) v = "";
                      if (v.length() > http._paramLen) {
                          v = v.substring(0, http._paramLen);
                      }
                      if (http._trace) {
                          tracer.newAttr(_pprefix+k, v);
                      }
                      c = sb.length() > 0 ? "&" : "?";
                      sb.append(c + k + "=" + v);
                  }
              }
          }
          rec.put("PARAMS", sb.toString());
          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  cookies_processor(cIn, cOut) {

      _cookieLen = zorka.intCfg("http.cookie.maxlen", 128);
      _iprefix = zorka.stringCfg("http.cookies.iprefix");
      _oprefix = zorka.stringCfg("http.cookies.oprefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.cookies.include"), zorka.listCfg("http.cookies.exclude"));

      process(rec) {
          if (cIn) {
              icookies = rec.get("EXCH").getRequestCookies();
              if (icookies != null) {
                  for (c : icookies.values()) {
                      name = c.getName();
                      if (_matcher.matches(name)) {
                          val = c.getValue();
                          if (val != null && val.length() > _cookieLen) {
                              val = val.substring(0, _cookieLen);
                          }
                          if (http._trace) {
                              tracer.newAttr(_iprefix + name, val);
                          }
                      }
                  }
              }
          }

          if (cOut) {
              ocookies = rec.get("EXCH").getResponseCookies();
              if (ocookies != null) {
                  for (c : ocookies.values()) {
                      name = c.getName();
                      if (_matcher.matches(name)) {
                          val = c.getValue();
                          if (val != null && val.length() > _cookieLen) {
                              val = val.substring(0, _cookieLen);
                          }
                          if (http._trace) {
                              tracer.newAttr(_oprefix + name, val);
                          }
                      }
                  }
              }
          }

          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  headers_processor(hdrIn, hdrOut) {

      _iprefix = zorka.stringCfg("http.headers.iprefix");
      _oprefix = zorka.stringCfg("http.headers.oprefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.headers.include"), zorka.listCfg("http.headers.exclude"));
      _maxlen = zorka.intCfg("http.headers.maxlen");

      process(rec) {

          req = rec.get("EXCH").getRequestHeaders();
          if (hdrIn && req != null && req.getHeaderNames() != null) {
              for (name : req.getHeaderNames()) {
                  hdrs = req.get(""+name);
                  if (hdrs != null) {
                      i = 0;
                      for (hdr : hdrs) {
                          if (hdr.length() > _maxlen) {
                              hdr = hdr.substring(0, _maxlen) + "...";
                          }
                          if (i == 0) {
                              tracer.newAttr(_iprefix + name, hdr);
                          } else {
                              tracer.newAttr(_iprefix + i + "_" + name, hdr);
                          }
                          i++;
                      }
                  }
              }
          }

          resp = rec.get("EXCH").getResponseHeaders();
          if (hdrOut && resp != null && resp.getHeaderNames() != null) {
              for (name : resp.getHeaderNames()) {
                  hdrs = resp.get(""+name);
                  if (hdrs != null) {
                      i = 0;
                      for (hdr : hdrs) {
                          if (hdr.length() > _maxlen) {
                              hdr = hdr.substring(0, _maxlen) + "...";
                          }
                          if (i == 0) {
                              tracer.newAttr(_oprefix + name, hdr);
                          } else {
                              tracer.newAttr(_oprefix + i + "_" + name, hdr);
                          }
                          i++;
                      }
                  }
                  if ("Location".equals(name) && hdrs.length > 0) {
                    tracer.newAttr("REDIRECT", hdrs[0]);
                    rec.put("REDIRECT", hdrs[0]);
                  }
              }
          }

          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  spy.add(spy.instrument("UNDERTOW_HTTP_2")
      .onEnter(spy.fetchArg("EXCH", 1),
        spy.format("URI", "${EXCH.requestURI}"),
        http._trace ? spy.subchain(
          http._uriQualifier,
          tracer.begin("HTTP", zorka.longCfg("http.trace.time")),
          tracer.attr("URI", "URI"),
          tracer.formatAttr("METHOD", "${EXCH.requestMethod}"),
          http._headers ? headers_processor(true, false) : null,
          _dtrace_enabled ? tracer.dtraceInput(zorka.longCfg("http.trace.time")) : null
        ) : null)
      .onReturn(spy.put("ERR", ""))
      .onError(spy.fetchError("EX"), spy.format("ERR", "${EX}"),
        http._trace ? spy.subchain(
          http._uriQualifier,
          http._error_chain,
          tracer.markError(),
          tracer.attr("ERR", "ERR")
        ) : null)
      .onSubmit(
        spy.strTime("TIME"),
        spy.format("STATUS", "${EXCH.responseCode}"),
        spy.get("USER", "EXCH", "securityContext", "authenticatedAccount", "principal", "name"),
        http._trace ? spy.subchain(
          http._uriQualifier,
          tracer.attr("STATUS", "STATUS"),
          tracer.filterBy("STATUS", null, http._errors, null, null),
          tracer.attr("USER", "USER"),
          http._cookies ? cookies_processor(true, true) : spy.put("COOKIES", ""),
          http._headers ? headers_processor(false, true) : null,
          http._params ? param_processor() : spy.put("PARAMS", "")
        ) : null,
        http._slow_chain,
        spy.subchain(
          spy.valSetFilter("STATUS", http._errors),
          spy.markError(), tracer.markError(),
          http._error_chain),
        http._redirQualifier,
        http._stats ? spy.zorkaStats("java", http._mbean, "stats", "ALL", "T", null, http._action) : null,
        http._tags_chain)
      .include(spy.byMethod(0, "io.undertow.server.Connectors", "executeRootHandler", null)));


  return this;
}

undertow = __undertow();

