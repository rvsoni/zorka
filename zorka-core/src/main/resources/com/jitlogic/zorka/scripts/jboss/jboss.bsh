/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// Common JBoss 5/6 support functions

zorka.require(
  "audit.bsh",
  "apache/catalina.bsh",
  "jboss/jbossejb.bsh",
  "javax/jms.bsh"
);

__jboss() {

  thread_util(name) {
    tbusy = zorka.jmx("jboss", "jboss.web:type=ThreadPool,name="+name, "currentThreadsBusy");
    tmax  = zorka.jmx("jboss", "jboss.web:type=ThreadPool,name="+name, "maxThreads");
    if (tbusy == null || tmax == null) return null;
    if (tbusy.equals(0L) || tmax.equals(0L)) return 0.0;
    return 100.0 * tbusy.longValue() / tmax.longValue();
  }

  // Servlets
  __servlet() {

    discovery() {
      return zabbix.discovery("jboss", "jboss.web:j2eeType=Servlet,*",
                 "name", "WebModule", "J2EEServer", "J2EEApplication", "j2eeType");
    }

    // Request count
    requests(server,application,module,name) {
      ret = zorka.jmx("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "requestCount");
      return ret != null ? ret : 0.0;
    }

    // Error count
    errors(server,application,module,name) {
      ret = zorka.jmx("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name, "errorCount");
      return ret != null ? ret : 0.0;
    }

    // Average processing time
    time(server,application,module,name,horizon) {
      ret = zorka.rate("jboss", "jboss.web:j2eeType=Servlet,J2EEServer="+server+
        ",J2EEApplication="+application+",WebModule="+module+",name="+name,
        "processingTime", "requestCount", horizon);
      return ret != null ? ret : 0.0;
    }

    return this;
  }

  servlet = __servlet();

  if (zorka.boolCfg("audit.log.logins")) {

     zorka.logInfo("Enabling AUTHENTICATION audit for JBoss ...");

    __checkPrincipal() {
      process(rec) {
        rec.put("ACTION", rec.get("PRINCIPAL") != null ? "AUTHENTICATION_SUCCESS" : "AUTHENTICATION_FAILURE");
        return rec;
      }
      return this;
    }

    sdefWebLogin = spy.instrument("JBOSS_AUDIT_WEB_LOGIN")
      .onEnter(spy.fetchArg("USER", 1))
      .onReturn(spy.fetchRetVal("PRINCIPAL"))
      .onError(spy.fetchError("ERROR"))
      .onSubmit((com.jitlogic.zorka.core.spy.SpyProcessor)__checkPrincipal())
      .include(
        spy.byMethod(0, "org.jboss.web.tomcat.security.JBossSecurityMgrRealm", "authenticate",
                     "java.security.Principal", "String"));

    audit.audit(sdefWebLogin, "AUTHENTICATION", "${ACTION} who=${USER} result=${PRINCIPAL|ERROR:NOT_LOGGED_IN}");

    // TODO JBOSS_AUDIT_EJB_LOGIN

    // Doing more JBoss 5.x work upfront is waste of time. Examples are complete mess.
    // Maven repository has been fucked up by RedHat and packages refer to non-existent repositories.
    // I wasn't even able to compile anything useful with this. JBoss 5 is such a piece of shit.
    // If you need EJB auditing for JBoss 5, send me precompiled binaries of both .ear and client.

  }

  if (zorka.boolCfg("audit.log.authorizations")) {

     zorka.logInfo("Enabling AUTHORIZATION audit for JBoss ...");

     // Nothing here (yet), Catalina does (most of the) work

  }

  if (zorka.boolCfg("tracer", false)) {
    tracer.exclude("org.jboss.jms.client.delegate.ClientClusteredConnectionFactoryDelegate");
  }

  // Catch MX mbean server initialization and register JBoss MBean Server here ...

  __mbsRegister() {

    jbossMbs = null;
    javaMbs = null;

    process(record) {
      synchronized (super) {
        if (super.javaMbs == null) {
          mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer();
          zorka.registerMbs("java", mbs);
          super.javaMbs = mbs;
          zorka.logInfo("Registered platform mbean server as 'java'");
        }
        if (super.jbossMbs == null) {
          mbs = record.get("THIS").getServer();
          //mbs = record.get("MBS");
          ccl = Thread.currentThread().getContextClassLoader();
          zorka.registerMbs("jboss", mbs, ccl);
          super.jbossMbs = mbs;
          zorka.logInfo("Registered JBoss MBean server as 'jboss'");
          if (zorka.boolCfg("jboss.dsquery", false)) {
            super.super.dsquery = __dsquery(ccl);
            zorka.logInfo("Created jboss.dsquery JDBC DataSource interface.");
          }
        }
      }
      return record;
    }
    return this;
  } // __mbsRegister()


  spy.add(spy.instance("JBOSS_MBS_REGISTER")
    .onReturn(spy.fetchArg("THIS", 0), (com.jitlogic.zorka.core.spy.SpyProcessor)__mbsRegister())
    .include(spy.byMethod(0, "org.jboss.naming.NamingService", "startService", null)));


  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("JBOSS");
  }

  return this;
}


jboss = __jboss();

