/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh",
  "traps.bsh"
);

__http() {

  // Default values for HTTP stats
  zorka.defCfg("http.stats", "yes");
  zorka.defCfg("http.stats.congestion", "yes");
  zorka.defCfg("http.stats.mbean", "zorka:type=ZorkaStats,name=HttpStats");

  // Default values for HTTP tracer options
  zorka.defCfg("http.trace", zorka.stringCfg("tracer", "no"));
  zorka.defCfg("http.trace.time", zorka.longCfg("tracer.min.trace.time"));
  zorka.defCfg("http.trace.include", "");
  zorka.defCfg("http.trace.exclude", "/favicon.ico");

  // Default values for HTTP parameter processing
  zorka.defCfg("http.params", zorka.stringCfg("http.trace"));
  zorka.defCfg("http.params.exclude", "");
  zorka.defCfg("http.params.include", "");
  zorka.defCfg("http.params.prefix", "Par__");
  zorka.defCfg("http.param.maxlen", 256);

  // Default values for HTTP cookie processing
  zorka.defCfg("http.cookies", zorka.stringCfg("http.trace"));
  zorka.defCfg("http.cookies.exclude", "");
  zorka.defCfg("http.cookies.include", "");
  zorka.defCfg("http.cookies.iprefix", "CookieIn__");
  zorka.defCfg("http.cookies.oprefix", "CookieOut__");
  zorka.defCfg("http.cookies.maxlen", "256");

  // Default values for HTTP headers processing
  zorka.defCfg("http.headers", zorka.stringCfg("http.trace"));
  zorka.defCfg("http.headers.exclude", "");
  zorka.defCfg("http.headers.include", "");
  zorka.defCfg("http.headers.iprefix", "HdrIn__");
  zorka.defCfg("http.headers.oprefix", "HdrOut__");
  zorka.defCfg("http.headers.maxlen", "256");

  // Default values for HTTP slow requests log configuration options
  zorka.defCfg("http.slow", zorka.boolCfg("traps.slow"));
  zorka.defCfg("http.slow.time", "5000");
  zorka.defCfg("http.slow.file.path", util.path("${zorka.log.dir}", "http-slow.log"));
  zorka.defCfg("http.slow.file.max", "8M");
  zorka.defCfg("http.slow.file.num", "8");
  zorka.defCfg("http.slow.format", "[${TIME}] ${URI}${PARAMS: } -> ${STATUS}");

  // Default values for HTTP error log configuration options
  zorka.defCfg("http.error", zorka.boolCfg("traps.error"));
  zorka.defCfg("http.error.codes", "400,404,405,406,407,408,409,410,411,412,413,414,415,416,417,419,420,422,423,424,"
    + "425,426,428,429,431,444,451,500,501,502,503,504,505,506,507,508,510,598,599");
  zorka.defCfg("http.error.file.path", util.path("${zorka.log.dir}", "http-error.log"));
  zorka.defCfg("http.error.file.max", "8M");
  zorka.defCfg("http.error.file.num", "8");
  zorka.defCfg("http.error.format", "[${TIME}] ${URI}${PARAMS: } -> ${STATUS}");

  _trace = zorka.boolCfg("http.trace");
  _stats = zorka.boolCfg("http.stats");
  _congestion = zorka.boolCfg("http.stats.congestion");
  _mbean = zorka.stringCfg("http.stats.mbean");
  _action = _congestion ? spy.ACTION_EXIT|spy.ACTION_STATS : spy.ACTION_STATS;
  _slow = zorka.boolCfg("http.slow");
  _params = zorka.boolCfg("http.params");
  _paramLen = zorka.intCfg("http.param.maxlen", 128);
  _cookies = zorka.boolCfg("http.cookies");
  _headers = zorka.boolCfg("http.headers");
  _error = zorka.boolCfg("http.error");

  _uriQualifier = spy.stringMatcher("URI", zorka.listCfg("http.trace.include"), zorka.listCfg("http.trace.exclude"));

  _errors = zorka.setCfg("http.error.codes");

  _slow_chain = traps.subchain("http", "slow");
  _error_chain = traps.subchain("http", "error");

  _redirQualifier = zorka.hasCfg("http.redir.errors") ? 
    spy.subchain(
      spy.stringMatcher("REDIRECT", zorka.listCfg("http.redir.errors"), zorka.listCfg("")),
      tracer.traceFlags("HTTP", tracer.SUBMIT_TRACE|tracer.ERROR_MARK)
    ) : null;

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("HTTP");
  }

  param_processor() {

      _pprefix = zorka.stringCfg("http.params.prefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.params.include"), zorka.listCfg("http.params.exclude"));

      process(rec) {
          sb = new StringBuilder();
          pmap = rec.get("REQ").getParameterMap();
          if (pmap != null) {
              for (e : pmap.entrySet()) {
                  String k = e.getKey();
                  if (_matcher.matches(k)) {
                      String v = e.getValue().length > 0 ? e.getValue()[0] : "";
                      if (v.length() > _paramLen) {
                          v = v.substring(0, _paramLen);
                      }
                      if (_trace) {
                          tracer.newAttr(_pprefix+k, v);
                      }
                      c = sb.length() > 0 ? "&" : "?";
                      sb.append(c + k + "=" + v);
                  }
              }
          }
          rec.put("PARAMS", sb.toString());
          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  cookies_processor(cIn, cOut) {

      _cookieLen = zorka.intCfg("http.cookie.maxlen", 128);
      _iprefix = zorka.stringCfg("http.cookies.iprefix");
      _oprefix = zorka.stringCfg("http.cookies.oprefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.cookies.include"), zorka.listCfg("http.cookies.exclude"));

      process(rec) {
          if (cIn) {
              icookies = util.get(rec.get("REQ"), "cookies");
              if (icookies != null) {
                  for (c : icookies) {
                      name = c.getName();
                      if (_matcher.matches(name)) {
                          val = c.getValue();
                          if (val != null && val.length() > _cookieLen) {
                              val = val.substring(0, _cookieLen);
                          }
                          if (_trace) {
                              tracer.newAttr(_iprefix + name, val);
                          }
                      }
                  }
              }
          }

          if (cOut) {
              ocookies = util.get(rec.get("RESP"), "cookies");
              if (ocookies != null) {
                  for (c : ocookies) {
                      name = c.getName();
                      if (_matcher.matches(name)) {
                          val = c.getValue();
                          if (val != null && val.length() > _cookieLen) {
                              val = val.substring(0, _cookieLen);
                          }
                          if (_trace) {
                              tracer.newAttr(_oprefix + name, val);
                          }
                      }
                  }
              }
          }

          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  headers_processor(hdrIn, hdrOut) {

      _iprefix = zorka.stringCfg("http.headers.iprefix");
      _oprefix = zorka.stringCfg("http.headers.oprefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.headers.include"), zorka.listCfg("http.headers.exclude"));
      _maxlen = zorka.intCfg("http.headers.maxlen");

      process(rec) {

          req = rec.get("REQ");
          if (hdrIn && req != null && req.getHeaderNames() != null) {
              for (name : req.getHeaderNames()) {
                  hdrs = req.getHeaders(name);
                  if (hdrs != null) {
                      i = 0;
                      for (hdr : hdrs) {
                          if (hdr.length() > _maxlen) {
                              hdr = hdr.substring(0, _maxlen) + "...";
                          }
                          if (i == 0) {
                              tracer.newAttr(_iprefix + name, hdr);
                          } else {
                              tracer.newAttr(_iprefix + i + "_" + name, hdr);
                          }
                          i++;
                      }
                  }
              }

              if (http._trace && _dtrace_enabled) {
                  uuid = req.getHeader(tracer.DTRACE_UUID_HDR);
                  if (uuid != null) {
                      rec.put(tracer.DTRACE_UUID, uuid);
                  }

                  tid = req.getHeader(tracer.DTRACE_TID_HDR);
                  if (tid != null) {
                      rec.put(tracer.DTRACE_IN, tid);
                  }
                  xtt = req.getHeader(tracer.DTRACE_XTT_HDR);
                  if (xtt != null) {
                      rec.put(tracer.DTRACE_XTT, xtt);
                  }
              }
          }

          resp = rec.get("RESP");
          if (hdrOut && resp != null && util.get(resp, "headerNames") != null) {
              for (name : resp.getHeaderNames()) {
                  hdrs = resp.getHeaders(name);
                  if (hdrs != null) {
                      i = 0;
                      for (hdr : hdrs) {
                          if (hdr.length() > _maxlen) {
                              hdr = hdr.substring(0, _maxlen) + "...";
                          }
                          if (i == 0) {
                              tracer.newAttr(_oprefix + name, hdr);
                          } else {
                              tracer.newAttr(_oprefix + i + "_" + name, hdr);
                          }
                          i++;
                      }
                  }
                  if ("Location".equals(name) && hdrs.length > 0) {
                    tracer.newAttr("REDIRECT", hdrs[0]);
                    rec.put("REDIRECT", hdrs[0]);
                  }
              }
          }

          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  error_marker() {
    process(rec) {
      rec.put(".STAGES", (rec.get(".STAGES")|(1<<spy.ON_ERROR))&(~(1<<spy.ON_RETURN)));
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  _tags_chain = null;

  if (_stats && zorka.boolCfg("http.tags", false)) {
      zorka.logInfo("Enabling HTTP tagging ...");
      stats = zorka.registerZorkaStats("java", _mbean, "byTag", "HTTP stats by tag classifiers");
      _tags_chain = spy.subchain(
        spy.put("TAG", zorka.stringCfg("http.tags.0", "OTHER")),
        spy.put("TAG_DESC", zorka.stringCfg("http.tags.0.desc", "Other pages")));
      for (i = 1; ; i++) {
          if (zorka.hasCfg("http.tags."+i+".uri")) {
              zorka.logInfo("HTTP_TAG: " + zorka.stringCfg("http.tags."+i+".uri")
                  + " -> " + zorka.stringCfg("http.tags."+i));
              stats.getMethodCallStatistic(zorka.stringCfg("http.tags."+i))
                .setDescription(zorka.stringCfg("http.tags."+i+".desc", "${TAG}"));
              _tags_chain = _tags_chain.with(
                  spy.transform("TAG", "URI",
                    zorka.stringCfg("http.tags."+i+".uri"),
                    zorka.stringCfg("http.tags."+i)));
          } else {
              break;
          }
      }
      _tags_chain = _tags_chain.with(spy.zorkaStats("java", _mbean, "byTag", "${TAG}"));
      if (zorka.boolCfg("zabbix.active")) {
          zabbix.tagMetadata("HTTP:TAGS");
      }
  }


  // Nagios commands for zorka stats
  if (zorka.boolCfg("nagios", false)) {
    zorka.require("nagios.bsh");
    nagios_util.def_zorka_stat(_mbean, "HTTP");
  }

  discovery(attr, tag) {
    return zabbix.discovery(
      zorka.query("java", _mbean, "name", "type")
        .get(attr)
        .listAs("**", tag)
        .getValueAs("description", "DESC"));
  }

  calls(attr, tag) {
    calls = zorka.jmx("java", _mbean, attr, tag, "calls");
    return calls != null ? calls : 0;
  }

  errors(attr, tag) {
    errors = zorka.jmx("java", _mbean, attr, tag, "errors");
    return errors != null ? errors : 0;
  }

  peak(attr, tag) {
    peak = zorka.jmx("java",  _mbean, attr, tag, "maxTimeCLR");
    return peak != null ? peak : 0;
  }

  threads(attr, tag) {
    threads = zorka.jmx("java",  _mbean, attr, tag, "maxThreadsCLR");
  }

  avg1(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG1");
  }

  avg5(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG5");
  }

  avg15(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG15");
  }

  sla(attr, tag, t, d) {
    sla = zorka.jmx("java", _mbean, attr, tag, "sla", t, "slaCLR");
    return sla != null ? sla : d;
  }

  return this;
}

http = __http();

