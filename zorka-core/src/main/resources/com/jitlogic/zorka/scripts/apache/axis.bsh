/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "soap.bsh"
);

__axis() {

  dtrace_req() {
    process(rec) {
      ds = rec.get("DTRACE");
      hb = rec.get("HBUF");
      dt = rec.get("DTRACE_OUT");
      if (ds != null && hb != null && dt != null) {
        hb.append(tracer.DTRACE_UUID_HDR);
        hb.append(": ");
        hb.append(ds.getUuid());
        hb.append("\r\n");
        hb.append(tracer.DTRACE_TID_HDR);
        hb.append(": ");
        hb.append(dt);
        hb.append("\r\n");

        xtt = rec.get(tracer.DTRACE_XTT);
        if (xtt != null) {
          hb.append(tracer.DTRACE_XTT_HDR);
          hb.append(": ");
          hb.append(xtt);
          hb.append("\r\n");
        }
      }
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  spy.add(
    spy.instrument("AXIS_SERVER_INVOKE")
      .onEnter(spy.fetchArg("CTX", 1),
        soap._trace ? tracer.begin("SOAP", zorka.longCfg("soap.trace.time")) : null)
      .onError(spy.fetchError("ERROR"), tracer.flags(tracer.SUBMIT_TRACE),
        spy.format("SERVICE", "${CTX.service.name}"),
        spy.format("METHOD", "${CTX.operation.name}"),
        soap._fetch_xml ? spy.format("XML_IN",  "${CTX.requestMessage.SOAPEnvelope}") : null,
        soap._fetch_xml ? spy.format("XML_OUT", "${CTX.responseMessage.SOAPEnvelope}") : null,
        soap._error_chain)
      .onSubmit(
        spy.format("SERVICE", "${CTX.service.name}"),
        spy.format("METHOD", "${CTX.operation.name}"),
        soap._fetch_xml ? spy.format("XML_IN",  "${CTX.requestMessage.SOAPEnvelope}") : null,
        soap._fetch_xml ? spy.format("XML_OUT", "${CTX.responseMessage.SOAPEnvelope}") : null,
        spy.strTime("TIME"), soap._slow_chain,
        soap._trace ? spy.subchain(
          tracer.attr("SERVICE", "SERVICE"),
          tracer.attr("METHOD", "METHOD"),
          soap._fetch_xml ? tracer.attr("XML_IN", "XML_IN") : null,
          soap._fetch_xml ? tracer.attr("XML_OUT", "XML_OUT") : null
        ) : null,
        soap._stats ? spy.subchain(
          spy.zorkaStats("java", soap._mbean, "stats", "SVC"),
          spy.zorkaStats("java", soap._mbean, "svc", "${SERVICE}.${METHOD}")
        ) : null)
    .include(spy.byMethod("org.apache.axis.server.AxisServer", "invoke")));


  __get_call_obj() {
    process(rec) {
      ctx = rec.get("CTX");
      if (ctx != null) {
        rec.put("CALL_OBJ", ctx.getProperty("call_object"));
      }
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  spy.add(
    spy.instrument("AXIS_CLIENT_HTTP")
      .onEnter(spy.fetchArg("CTX", 2),
        _dtrace_enabled ? spy.fetchArg("HBUF", 4) : null,
        soap._trace ? spy.subchain(
          tracer.begin("SOAP_CLI", zorka.longCfg("soap.trace.time")),
          _dtrace_enabled ? tracer.dtraceOutput() : null,
          _dtrace_enabled ? dtrace_req() : null) : null)
      .onError(spy.fetchError("ERROR"), tracer.flags(tracer.SUBMIT_TRACE),
        __get_call_obj(),
        spy.format("SERVICE", "${CALL_OBJ.operationName.namespaceURI}"),
        spy.format("METHOD", "${CALL_OBJ.operationName.localPart}"),
        soap._fetch_xml ? spy.format("XML_IN",  "${CTX.requestMessage.SOAPEnvelope}") : null,
        soap._fetch_xml ? spy.format("XML_OUT", "${CTX.responseMessage.SOAPEnvelope}") : null,
        soap._error_chain)
      .onSubmit(
        __get_call_obj(),
        spy.format("SERVICE", "${CALL_OBJ.operationName.namespaceURI}"),
        spy.format("METHOD", "${CALL_OBJ.operationName.localPart}"),
        soap._fetch_xml ? spy.format("XML_IN",  "${CTX.requestMessage.SOAPEnvelope}") : null,
        soap._fetch_xml ? spy.format("XML_OUT", "${CTX.responseMessage.SOAPEnvelope}") : null,
        spy.strTime("TIME"), soap._slow_chain,
        soap._trace ? spy.subchain(
          tracer.attr("SERVICE", "SERVICE"),
          tracer.attr("METHOD", "METHOD"),
          soap._fetch_xml ? tracer.attr("XML_IN", "XML_IN") : null,
          soap._fetch_xml ? tracer.attr("XML_OUT", "XML_OUT") : null
        ) : null,
        soap._stats ? spy.subchain(
          spy.zorkaStats("java", soap._mbean, "stats", "CLI"),
          spy.zorkaStats("java", soap._mbean, "cli", "${SERVICE}.${METHOD}")
        ) : null)
      .include(spy.byMethod(0, "org.apache.axis.transport.http.HTTPSender", "writeToSocket", "java.io.InputStream",
        "org.apache.axis.transport.http.SocketHolder", "org.apache.axis.MessageContext")));


  spy.add(
    spy.instrument("AXIS_CLIENT_JMS")
      .onEnter(spy.fetchArg("CTX", 1),
        soap._trace ? tracer.begin("SOAP_CLI", zorka.longCfg("soap.trace.time")) : null)
      .onError(spy.fetchError("ERROR"), tracer.flags(tracer.SUBMIT_TRACE),
        __get_call_obj(),
        spy.format("SERVICE", "${CALL_OBJ.operationName.namespaceURI}"),
        spy.format("METHOD", "${CALL_OBJ.operationName.localPart}"),
        soap._fetch_xml ? spy.format("XML_IN",  "${CTX.requestMessage.SOAPEnvelope}") : null,
        soap._fetch_xml ? spy.format("XML_OUT", "${CTX.responseMessage.SOAPEnvelope}") : null,
        soap._error_chain)
      .onSubmit(
        __get_call_obj(),
        spy.format("SERVICE", "${CALL_OBJ.operationName.namespaceURI}"),
        spy.format("METHOD", "${CALL_OBJ.operationName.localPart}"),
        soap._fetch_xml ? spy.format("XML_IN",  "${CTX.requestMessage.SOAPEnvelope}") : null,
        soap._fetch_xml ? spy.format("XML_OUT", "${CTX.responseMessage.SOAPEnvelope}") : null,
        spy.strTime("TIME"), soap._slow_chain,
        soap._trace ? spy.subchain(
          tracer.attr("SERVICE", "SERVICE"),
          tracer.attr("METHOD", "METHOD"),
          soap._fetch_xml ? tracer.attr("XML_IN", "XML_IN") : null,
          soap._fetch_xml ? tracer.attr("XML_OUT", "XML_OUT") : null
        ) : null,
        soap._stats ? spy.subchain(
          spy.zorkaStats("java", soap._mbean, "stats", "CLI"),
          spy.zorkaStats("java", soap._mbean, "cli", "${SERVICE}.${METHOD}")
        ) : null)
      .include(spy.byMethod(0, "org.apache.axis.transport.jms.JMSSender", "invoke", "void",
        "org.apache.axis.MessageContext")));


  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("AXIS");
  }

  return this;
}

axis = __axis();
