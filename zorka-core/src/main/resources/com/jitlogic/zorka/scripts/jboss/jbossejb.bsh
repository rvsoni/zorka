/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require("ejb.bsh");

__jbossejb() {

  if (zorka.boolCfg("ejb", true)) {

    // EJB tracing for JBoss 4/5

    spy.add(spy.instrument("JBOSS_EJB")
      .onEnter(
        spy.fetchArg("INV", 1),
        spy.format("METHOD", "${INV.method.name}"),
        spy.format("CLASS", "${INV.method.declaringClass.name}"),
        spy.get("ARGS", "INV", "arguments"),
        ejb._trace ? tracer.begin("EJB", zorka.longCfg("ejb.trace.time")) : null,
        ejb._trace ? tracer.attr("METHOD", "METHOD") : null,
        ejb._trace ? tracer.attr("CLASS", "CLASS") : null)
      .onError(
        ejb._trace ? tracer.flags(tracer.SUBMIT_TRACE) : null,
        spy.fetchError("ERR"),
        spy.format("MSG", "${ERR.message}"),
        ejb._error_chain)
      .onReturn(
        ejb._params ? spy.fetchRetVal("RET") : spy.put("RET", ""))
      .onSubmit(
        ejb._params ? ejb.arg_processor() : spy.put("PARAMS", ""),
        ejb._trace ? tracer.attr("RET", "RET") : null,
        ejb._stats ? spy.zorkaStats("java", ejb._mbean, "byMethod", "${CLASS}.${METHOD}") : null,
        ejb._stats ? spy.zorkaStats("java", ejb._mbean, "stats", "ALL") : null,
        ejb._tags_chain,
        spy.longerThan(zorka.longCfg("ejb.slow.time")),
        spy.strTime("TIME"),
        ejb._slow_chain)
      .include(spy.byMethod("org.jboss.ejb.Container", "invoke")));
  }


    spy.add(spy.instrument("JBOSS_EJB3")
      .onEnter(
          spy.fetchArg("MDESC", 2), spy.fetchArg("ARGS", 3),
          ejb._trace ? tracer.begin("EJB", zorka.longCfg("ejb.trace.time")) : null,
          ejb._trace ? tracer.formatAttr("METHOD", "${MDESC.name}") : null,
          ejb._trace ? tracer.formatAttr("CLASS", "${MDESC.declaringClass.name}") : null)
      .onError(
          ejb._trace ? tracer.flags(tracer.SUBMIT_TRACE) : null,
          spy.fetchError("ERR"),
          spy.format("MSG", "${ERR.message}"),
          ejb._error_chain)
      .onReturn(
          ejb._params ? spy.fetchRetVal("RET") : spy.put("RET", ""))
      .onSubmit(
          ejb._params ? (com.jitlogic.zorka.core.spy.SpyProcessor)(ejb.arg_processor()) : spy.put("PARAMS", ""),
          ejb._trace ? tracer.attr("RET", "RET") : null,
          ejb._stats ? spy.zorkaStats("java", ejb._mbean, "byMethod", "${CLASS}.${METHOD}") : null,
          ejb._stats ? spy.zorkaStats("java", ejb._mbean, "stats", "ALL") : null,
          spy.longerThan(zorka.longCfg("ejb.slow.time")),
          spy.strTime("TIME"),
          ejb._slow_chain)
      .include(
          spy.byMethod(0, "org.jboss.ejb3.proxy.impl.handler.session.SessionProxyInvocationHandlerBase", "invoke",
              "Object", "Object", "java.lang.reflect.Method")
      ));

  return this;

}

jbossejb = __jbossejb();
