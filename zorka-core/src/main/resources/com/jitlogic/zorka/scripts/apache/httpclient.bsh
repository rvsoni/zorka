/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// This file contains instrumentation definitions for Apache httpclient library.

zorka.require("tracer.bsh");


__apache_httpclient() {

  // Default values for httpclient tracer options
  zorka.defCfg("apache.httpclient.trace", zorka.stringCfg("tracer", "no"));
  zorka.defCfg("apache.httpclient.trace.time", zorka.longCfg("tracer.min.trace.time"));

  _trace = zorka.boolCfg("apache.httpclient.trace");
  _traceTime = zorka.longCfg("apache.httpclient.trace.time");

  headers_processor() {
      process(rec) {
          method = rec.get("METHOD");
          if (method != null) {
            ihdr = util.get(method, "requestHeaders");
            if (method != null && ihdr != null) {
              for (hdr : ihdr) {
                  tracer.newAttr("HdrOut__" + hdr.getName(), ""+hdr.getValue());
                }

            }
            ohdr = util.get(method, "responseHeaders");
            if (method != null && ohdr != null) {
                for (hdr : ohdr) {
                    tracer.newAttr("HdrIn__" + hdr.getName(), ""+hdr.getValue());
                }
            }
          }
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  dtrace_req_3x() {
      process(rec) {
        ds = rec.get("DTRACE");
        m = rec.get("METHOD");
        if (ds != null && m != null) {
          m.addRequestHeader(tracer.DTRACE_UUID_HDR, ds.getUuid());
          m.addRequestHeader(tracer.DTRACE_TID_HDR, rec.get("DTRACE_OUT"));
          xtt = rec.get(tracer.DTRACE_XTT);
          if (xtt != null) {
              m.addRequestHeader(tracer.DTRACE_XTT_HDR, xtt.toString());
          }
        }

        return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  // For Apache HTTP Client 3.x
  spy.add(
    spy.instrument("APACHE_HTTPCLIENT3_EXECUTE")
      .onEnter(spy.fetchArg("METHOD", 2),
        _trace ? spy.subchain(
          tracer.begin("HTTP_CLI", _traceTime),
          tracer.formatAttr("URI", "${METHOD.URI}"),
          tracer.formatAttr("METHOD", "${METHOD.name}"),
          _dtrace_enabled ? tracer.dtraceOutput() : null,
          _dtrace_enabled ? dtrace_req_3x() : null) : null)
      .onReturn(spy.fetchRetVal("RET"), _trace ? tracer.attr("RET", "RET") : null)
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
        _trace ? spy.subchain(
          tracer.formatAttr("STATUS", "${METHOD.statusCode}"),
          tracer.formatAttr("STATUS_LINE", "${METHOD.getStatusLine}"),
          headers_processor()
        ) : null)
      .include(
        spy.byMethod(0, "org.apache.commons.httpclient.HttpClient", "executeMethod", "int",
          "org.apache.commons.httpclient.HostConfiguration",
          "org.apache.commons.httpclient.HttpMethod",
          "org.apache.commons.httpclient.HttpState"))
  );


  headers_processor_4x(String attr, String prefix) {
      process(rec) {
          req = rec.get(attr);
          if (req != null && req.getAllHeaders() != null) {
              for (hdr : req.getAllHeaders()) {
                  tracer.newAttr(prefix + hdr.getName(), ""+hdr.getValue());
              }
          }
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  dtrace_req_4x() {
      process(rec) {
        ds = rec.get("DTRACE");
        m = rec.get("REQ");
        if (ds != null && m != null) {
          m.addHeader(tracer.DTRACE_UUID_HDR, ds.getUuid());
          m.addHeader(tracer.DTRACE_TID_HDR, rec.get("DTRACE_OUT"));
          xtt = rec.get(tracer.DTRACE_XTT);
          if (xtt != null) {
              m.addHeader(tracer.DTRACE_XTT_HDR, xtt.toString());
          }
        }

        return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  // For Apache HTTP Client 4.x
  spy.add(
    spy.instrument("APACHE_HTTPCLIENT_4_DO_EXECUTE")
      .onEnter(spy.fetchArg("REQ", 2), spy.fetchArg("TGT", 1),
        _trace ? spy.subchain(
          tracer.begin("HTTP_CLI", _traceTime),
          tracer.formatAttr("METHOD", "${REQ.requestLine.method}"),
          tracer.formatAttr("URI", "${REQ.requestLine.uri}"),
          tracer.formatAttr("HOST", "${TGT.hostName}:${TGT.port}}"),
          _dtrace_enabled ? tracer.dtraceOutput() : null,
          _dtrace_enabled ? dtrace_req_4x() : null
        ) : null)
      .onReturn(spy.fetchRetVal("RET"),
        _trace ? spy.subchain(
          tracer.formatAttr("STATUS", "${RET.statusLine.statusCode}"),
          tracer.formatAttr("STATUS_LINE", "${RET.statusLine.reasonPhrase}")
        ) : null)
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
        _trace ? spy.subchain(
          headers_processor_4x("RET", "HdrIn__"),
          headers_processor_4x("REQ", "HdrOut__")
        ) : null)
      .include(spy.byMethod(0, "org.apache.**", "doExecute",
        "org.apache.http.client.methods.CloseableHttpResponse",
        "org.apache.http.HttpHost", "org.apache.http.HttpRequest",
        "org.apache.http.protocol.HttpContext")));

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("HTTP:CLIENT");
  }

  return this;

}

apache_httpclient = __apache_httpclient();

